<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>multithread on Aaron Phan</title>
    <link>https://tinhpv.github.io/tags/multithread/</link>
    <description>Recent content in multithread on Aaron Phan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 23 Aug 2022 00:41:36 +0700</lastBuildDate><atom:link href="https://tinhpv.github.io/tags/multithread/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Grand Central Dispatch</title>
      <link>https://tinhpv.github.io/posts/ios/grand-central-dispatch/</link>
      <pubDate>Tue, 23 Aug 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/ios/grand-central-dispatch/</guid>
      <description>Overview GCD helps to write multi-threaded code, create threads and schedule tasks on those threads. Main building block: Dispatch Queues, 3 types of queues: Main dispatch queue (serial, pre-defined) drawing app&amp;rsquo;s UI üé® handle events (e.g. user interaction) block it for too long, app will freeze ü•∂ Global queue (concurrent, pre-defined) Private queue (can be serial/concurrent optionally, serial by default) Usage:
Making a network call, which takes a long time in background queue When it completes, updating UI on main thread.</description>
    </item>
    
    <item>
      <title>Concurrency using Actor</title>
      <link>https://tinhpv.github.io/posts/ios/concurrency-with-actor-swift/</link>
      <pubDate>Sun, 21 Aug 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/ios/concurrency-with-actor-swift/</guid>
      <description>Overview Kind object type, on a par with enum, class, struct Actor is a reference type, similar to a class, can inherit from other actors, conforms to protocol, be generics, and be used with generics Difference is actor has isolation domain, which helps in protecting mutable state, prevent data races Actor&amp;rsquo;s code run on background by default Actor Isolation If an actor instance have mutable property (var), can only be modified on self Can access actor&amp;rsquo;s property, but this access is asynchronous, must use await Can call actor&amp;rsquo;s method, but this access is asynchronous, must use await (even if it is not an async method) Why await‚ùì To make sure, no other code belonging to the same actor can start, solves the problem of simultaneous access.</description>
    </item>
    
    <item>
      <title>Concurrency using Async/Await</title>
      <link>https://tinhpv.github.io/posts/ios/concurrency-with-async-await/</link>
      <pubDate>Sun, 21 Aug 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/ios/concurrency-with-async-await/</guid>
      <description>Overview 1func download(url: URL, completionHandler: @escaping (Data) -&amp;gt; ()) { 2 let task = URLSession.shared.dataTask(with: url) { data, _, error in 3 if let data = data { 4 completionHandler(data) 5 } 6 } 7 task.resume() 8} ‚¨á‚¨á‚¨á
1func download(url: URL) async throws -&amp;gt; Data { 2 let result = try await URLSession.shared.data(from: url) 3 return result.0 // the response data 4} async code runs IN ORDER. No inversion as using completion handler async code can return value to its caller.</description>
    </item>
    
  </channel>
</rss>
