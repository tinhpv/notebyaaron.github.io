<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ios-common on Aaron Phan</title>
    <link>https://tinhpv.github.io/tags/ios-common/</link>
    <description>Recent content in ios-common on Aaron Phan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 23 Aug 2022 00:41:36 +0700</lastBuildDate><atom:link href="https://tinhpv.github.io/tags/ios-common/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Grand Central Dispatch</title>
      <link>https://tinhpv.github.io/posts/ios/grand-central-dispatch/</link>
      <pubDate>Tue, 23 Aug 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/ios/grand-central-dispatch/</guid>
      <description>Overview GCD helps to write multi-threaded code, create threads and schedule tasks on those threads. Main building block: Dispatch Queues, 3 types of queues: Main dispatch queue (serial, pre-defined) drawing app&amp;rsquo;s UI ðŸŽ¨ handle events (e.g. user interaction) block it for too long, app will freeze ðŸ¥¶ Global queue (concurrent, pre-defined) Private queue (can be serial/concurrent optionally, serial by default) Usage:
Making a network call, which takes a long time in background queue When it completes, updating UI on main thread.</description>
    </item>
    
    <item>
      <title>Note on iOS application launch process</title>
      <link>https://tinhpv.github.io/posts/ios/ios-app-launch-process/</link>
      <pubDate>Thu, 23 Jun 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/ios/ios-app-launch-process/</guid>
      <description>Entry point When the app launches, system needs to know where to find the compiled binary inside app&amp;rsquo;s bundle ðŸ’Š Get name of the binary from Info.plist file with Executable file key (CFBundleExecutable), whose value is usually the same as $(PRODUCT_NAME) Build Setting System locates, loads binary file and links any needed frameworks Where systems call into binary&amp;rsquo;s code to make it run? With Objective-C app â†’ entry point is main() setup memory management environment - @autoreleasepool {} call built-in UIApplicationMain function to get the app running 1int main(int argc, char * argv[]) { 2 NSString * appDelegateClassName; 3 @autoreleasepool { 4 // Setup code that might create autoreleased objects goes here.</description>
    </item>
    
    <item>
      <title>Note on copy-on-write</title>
      <link>https://tinhpv.github.io/posts/ios/copy-on-write/</link>
      <pubDate>Thu, 10 Mar 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/ios/copy-on-write/</guid>
      <description>Value types - Reference types Value types, where each instance keeps a unique copy of its data, usually defined as a struct, enum, or tuple. Reference types, where instances share a single copy of the data, and the type is usually defined as a class. CoW - The value will be copied only upon mutation, and even then, only if it has more than one reference to it
Suppose we have 2 variables that reference to the same data.</description>
    </item>
    
  </channel>
</rss>
