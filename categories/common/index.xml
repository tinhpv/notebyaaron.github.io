<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>common on Note by Aaron</title>
    <link>https://tinhpv.github.io/categories/common/</link>
    <description>Recent content in common on Note by Aaron</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 23 Aug 2022 00:41:36 +0700</lastBuildDate><atom:link href="https://tinhpv.github.io/categories/common/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Grand Central Dispatch</title>
      <link>https://tinhpv.github.io/posts/grand-central-dispatch/</link>
      <pubDate>Tue, 23 Aug 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/grand-central-dispatch/</guid>
      <description>Overview GCD helps to write multi-threaded code, create threads and schedule tasks on those threads. Main building block: Dispatch Queues, 3 types of queues: Main dispatch queue (serial, pre-defined) drawing app&amp;rsquo;s UI ðŸŽ¨ handle events (e.g. user interaction) block it for too long, app will freeze ðŸ¥¶ Global queue (concurrent, pre-defined) Private queue (can be serial/concurrent optionally, serial by default) Usage:
Making a network call, which takes a long time in background queue When it completes, updating UI on main thread.</description>
    </item>
    
    <item>
      <title>Note on Memory management in Swift. Always need [weak self]? Delayed deallocation. Get rid of confusion!</title>
      <link>https://tinhpv.github.io/posts/memory-management/</link>
      <pubDate>Tue, 23 Aug 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/memory-management/</guid>
      <description>PROBLEM: 1class ProductViewController: UIViewController { 2 private lazy var buyButton = Button() 3 private let purchaseController: PurchaseController 4 5 ... 6 7 override func viewDidLoad() { 8 super.viewDidLoad() 9 10 // Since our buyButton retains its closure, and our 11 // view controller in turn retains that button, we&amp;#39;ll 12 // end up with a retain cycle by capturing self here: 13 buyButton.handler = { 14 self.showShoppingCart() 15 self.purchaseController.startPurchasingProcess() 16 } 17 } 18 19 private func showShoppingCart() { 20 .</description>
    </item>
    
    <item>
      <title>Data Race with Race Condition? Difference and Solution for both</title>
      <link>https://tinhpv.github.io/posts/race-condition-vs-data-race/</link>
      <pubDate>Sun, 21 Aug 2022 00:41:36 +0700</pubDate>
      
      <guid>https://tinhpv.github.io/posts/race-condition-vs-data-race/</guid>
      <description>What are they? Matters? ðŸ¤”ðŸ†˜ Data Race and Race Condition are DIFFERENT
Data-Race â†’ MORE than 1 thread access to shared-resource (can be a variable or object) and AT LEAST 1 thread tries to modify that resource Race-Condition â†’ Order of threads&amp;rsquo; execution leads to wrong program behavior Many race conditions are due to data races, and many data races lead to race conditions. Can have race conditions without data races and data races without race conditions.</description>
    </item>
    
  </channel>
</rss>
